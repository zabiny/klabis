/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/{userId}/changeGrantsForm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * returns grants assigned to member
         * @description Requires `members:permissions` grant
         */
        get: operations["getUserGrants"];
        /**
         * updates grants assigned to user
         * @description Requires `members:permissions` grant
         */
        put: operations["updateUserGrants"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{memberId}/suspendMembershipForm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve information about member account status for membership suspension
         * @description Returns information about member account to be suspended.   #### Required authorization requires `members:suspendMembership` grant
         */
        get: operations["membersMemberIdSuspendMembershipFormGet"];
        /**
         * Suspend membership for a club member
         * @description Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP '409' unless `force=true` parameter was used.  #### Required authorization requires `members:suspendMembership` grant
         */
        put: operations["membersMemberIdSuspendMembershipFormPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{memberId}/resumeMembershipForm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["resumeMembership"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{memberId}/editOwnMemberInfoForm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns data for edit member information form */
        get: operations["membersMemberIdEditOwnMemberInfoFormGet"];
        /** Update member information */
        put: operations["membersMemberIdEditOwnMemberInfoFormPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{memberId}/editByAdminForm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns data for edit member information form
         * @description Returns data for edit member information form  #### Required authorization requires `members:suspendMembership` grant
         */
        get: operations["getMemberEditByAdminForm"];
        /** Update member information */
        put: operations["putMemberEditByAdminForm"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/registrationForms/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns data for registration form */
        get: operations["getRegistrationForm"];
        /** Submits registration form - registers member to event */
        put: operations["submitRegistrationForm"];
        post?: never;
        delete: operations["cancelEventRegistration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oris/synchronizeEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Triggers events synchronization with ORIS
         * @description #### Required authorization requires `system:admin` grant
         */
        post: operations["orisSynchronizeEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/memberRegistrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRegistrationForm_1"];
        put?: never;
        /**
         * Register a new club member
         * @description Registers a new club member with the provided details.  #### Required authorization requires `members:register` grant
         */
        post: operations["memberRegistrationsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registrationNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recommended registration number for sex and date of birth
         * @description #### Required authorization requires `members:register` grant
         */
        get: operations["registrationNumberGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oris/userInfo/{regNum}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about user from ORIS
         * @description #### Required authorization requires `members:register` grant
         */
        get: operations["orisUserInfoRegNumGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Club members list
         * @description Returns club members
         */
        get: operations["membersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get member by ID
         * @description Returns a member
         */
        get: operations["membersMemberIdGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** returns details about available security grants what can be assigned to users */
        get: operations["getAllGrants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns events */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns event details */
        get: operations["getEventById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["rootNavigation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Link: {
            rel?: string;
            href?: string;
            hreflang?: string;
            media?: string;
            title?: string;
            type?: string;
            deprecation?: string;
            profile?: string;
            name?: string;
        };
        /** @description Data for form setting member grants */
        MemberGrantsForm: {
            links?: components["schemas"]["Link"][];
            grants?: ("members:register" | "members:edit" | "members:suspendMembership" | "members:resumeMembership" | "system:admin" | "members:permissions")[];
        };
        MembersMemberIdEditMemberInfoFormGet400ResponseAllOfValidationErrorsInnerApiDto: {
            links?: components["schemas"]["Link"][];
            fieldName?: string;
            errorMessage?: string;
        };
        MembersMemberIdEditMemberInfoFormGet400ResponseApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Description of the error status */
            title: string;
            /**
             * Format: int32
             * @description error status value
             */
            status: number;
            /** @description User friendly description of the error */
            detail: string;
            /** @description URI of the resource which has thrown the error */
            instance: string;
            type?: string;
            validationErrors?: components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseAllOfValidationErrorsInnerApiDto"][];
        };
        RFC7807ErrorResponseApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Description of the error status */
            title: string;
            /**
             * Format: int32
             * @description error status value
             */
            status: number;
            /** @description User friendly description of the error */
            detail: string;
            /** @description URI of the resource which has thrown the error */
            instance: string;
            type?: string;
        };
        /** @description Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension */
        MembershipSuspensionInfoRequestDto: {
            /** @description tells if member account should be suspended even when there are some unfinished things (canSuspend=false) */
            force: boolean;
        };
        AddressApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Street name and number */
            streetAndNumber: string;
            /** @description City */
            city: string;
            /** @description Postal or ZIP code */
            postalCode: string;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            country: string;
        };
        /** @description At least one of email or phone value is required */
        Contact: {
            links?: components["schemas"]["Link"][];
            /**
             * Format: email
             * @description Email address of the club member or guardian
             */
            email: string;
            /** @description Phone number of the club member or guardian */
            phone: string;
            /** @description Note about the contact */
            note?: string;
        };
        /** @description Member attributes which can be updated by member himself (member can update some own attributes)    #### Required authorization - user can edit own member data   Additional validations: - either contact or at least 1 guardian needs to be entered  */
        EditMyDetailsForm: {
            identityCard?: components["schemas"]["IdentityCardApiDto"];
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            address: components["schemas"]["AddressApiDto"];
            contact?: components["schemas"]["Contact"];
            guardians?: components["schemas"]["LegalGuardianApiDto"][];
            /**
             * Format: int32
             * @description SI chip used by member
             */
            siCard?: number;
            /** @description Bank account number of the club member IBAN */
            bankAccount?: string;
            /** @description Dietary restrictions of the club member */
            dietaryRestrictions?: string;
            drivingLicence?: ("B" | "BE" | "C" | "D")[];
            /** @description Whether the club member has completed the medic course */
            medicCourse?: boolean;
        };
        IdentityCardApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Personal identification number of the club member */
            number?: string;
            /**
             * Format: date
             * @description Expiry date of the ID card, YYYY-MM-DD
             */
            expiryDate?: string;
        };
        LegalGuardianApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description First name of the guardian */
            firstName: string;
            /** @description Last name of the guardian */
            lastName: string;
            contact: components["schemas"]["Contact"];
            /** @description Note about the guardian (matka, otec) */
            note?: string;
        };
        MembersMemberIdEditMemberInfoFormGet403ResponseAllOfMissingGrantApiDto: {
            links?: components["schemas"]["Link"][];
        };
        MembersMemberIdEditMemberInfoFormGet403ResponseApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Description of the error status */
            title: string;
            /**
             * Format: int32
             * @description error status value
             */
            status: number;
            /** @description User friendly description of the error */
            detail: string;
            /** @description URI of the resource which has thrown the error */
            instance: string;
            type?: string;
            missingGrant?: components["schemas"]["MembersMemberIdEditMemberInfoFormGet403ResponseAllOfMissingGrantApiDto"];
        };
        /** @description Member attributes editable by authorized user who can change details about other members  #### Required authorization - requires `members:edit` grant  Additional validations:  - when `CZ` is selected as nationality, then `birthCertificateNumber` is required value */
        EditAnotherMemberDetailsForm: {
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /**
             * Format: date
             * @description Date of birth of the club member
             */
            dateOfBirth: string;
            /** @description Birth certificate number for Czech citizens */
            birthCertificateNumber?: string;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            /** @enum {string} */
            sex: "male" | "female";
        };
        EventRegistrationForm: {
            siNumber: string;
            category: string;
        };
        /** @description DTO containing event IDs to synchronize */
        SynchronizeEventsRequest: {
            eventIds?: number[];
        };
        MemberRegistrationsPost409ResponseApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description Description of the error status */
            title: string;
            /**
             * Format: int32
             * @description error status value
             */
            status: number;
            /** @description User friendly description of the error */
            detail: string;
            /** @description URI of the resource which has thrown the error */
            instance: string;
            type?: string;
            /**
             * Format: uuid
             * @description ID of conflicting member
             */
            existingUserId?: string;
        };
        /** @description Data required to register new member.    #### Required authorization - requires `members:register` grant  Additional validations:  - either contact or guardian needs to be set - when nationality is different than `CZ`, `birthCertificateNumber` value will be ignored */
        MemberRegistrationForm: {
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /** @enum {string} */
            sex: "male" | "female";
            /**
             * Format: date
             * @description Date of birth of the club member
             */
            dateOfBirth: string;
            /** @description Birth certificate number for Czech citizens */
            birthCertificateNumber?: string;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            address: components["schemas"]["AddressApiDto"];
            contact?: components["schemas"]["Contact"];
            guardians?: components["schemas"]["LegalGuardianApiDto"][];
            /**
             * Format: int32
             * @description SI chip used by member
             */
            siCard?: number;
            /** @description Bank account number of the club member IBAN */
            bankAccount?: string;
            /** @description ORIS registration number */
            registrationNumber?: string;
            /**
             * Format: int32
             * @description Oris ID of registered orienteering runner
             */
            orisId?: number;
        };
        RegistrationNumberGet200ResponseApiDto: {
            links?: components["schemas"]["Link"][];
            /** @description ORIS registration number */
            suggestedRegistrationNumber: string;
        };
        /** @description User data retrieved from ORIS    #### Required authorization - requires `members:register` grant */
        ORISUserInfo: {
            links?: components["schemas"]["Link"][];
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /** @description ORIS registration number */
            registrationNumber: string;
            /**
             * Format: int32
             * @description Oris ID of registered orienteering runner
             */
            orisId?: number;
        };
        EntityModelMembersApiResponse: {
            /**
             * Format: int32
             * @description Unique identifier for the club member
             */
            id: number;
            /** Format: int32 */
            userId?: number;
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /** @description ORIS registration number */
            registrationNumber: string;
            /** @description Birth certificate number for Czech citizens */
            birthCertificateNumber?: string;
            identityCard?: components["schemas"]["IdentityCardApiDto"];
            address: components["schemas"]["AddressApiDto"];
            /**
             * Format: date
             * @description Date of birth of the club member
             */
            dateOfBirth: string;
            contact?: components["schemas"]["Contact"];
            legalGuardians?: components["schemas"]["LegalGuardianApiDto"][];
            /**
             * Format: int32
             * @description Chip number assigned to the club member
             */
            siCard?: number;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            /** @enum {string} */
            sex: "male" | "female";
            licences?: components["schemas"]["LicencesApiDto"];
            /** @description Bank account number of the club member IBAN */
            bankAccount?: string;
            /** @description Dietary restrictions of the club member */
            dietaryRestrictions?: string;
            drivingLicence?: ("B" | "BE" | "C" | "D")[];
            /** @description Whether the club member has completed the medic course */
            medicCourse?: boolean;
            links?: components["schemas"]["Link"][];
        };
        LicencesApiDto: {
            links?: components["schemas"]["Link"][];
            ob?: components["schemas"]["OBLicenceApiDto"];
            referee?: components["schemas"]["RefereeLicenceApiDto"];
            trainer?: components["schemas"]["TrainerLicenceApiDto"];
        };
        OBLicenceApiDto: {
            links?: components["schemas"]["Link"][];
            /**
             * @description License number of the club member
             * @enum {string}
             */
            licence: "E" | "R" | "A" | "B" | "C";
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            number?: number;
        };
        PagedModelEntityModelMembersApiResponse: {
            links?: components["schemas"]["Link"][];
            content?: components["schemas"]["EntityModelMembersApiResponse"][];
            page?: components["schemas"]["PageMetadata"];
        };
        RefereeLicenceApiDto: {
            links?: components["schemas"]["Link"][];
            /**
             * @description referee license number of the club member
             * @enum {string}
             */
            licence: "R1" | "R2" | "R3";
            /**
             * Format: date
             * @description Expiry date of the license
             */
            expiryDate: string;
        };
        TrainerLicenceApiDto: {
            links?: components["schemas"]["Link"][];
            /**
             * @description trainer license number of the club member
             * @enum {string}
             */
            licence: "T1" | "T2" | "T3";
            /**
             * Format: date
             * @description Expiry date of the license
             */
            expiryDate: string;
        };
        EntityModelMembershipSuspensionInfoApiDto: {
            /** @description tells if member account is currently suspended */
            readonly isSuspended: boolean;
            /** @description tells if member account can be suspended */
            readonly canSuspend: boolean;
            readonly details: components["schemas"]["SuspendMembershipBlockers"];
            /** @description tells if member account should be suspended even when there are some unfinished things (canSuspend=false) */
            force: boolean;
            links?: components["schemas"]["Link"][];
        };
        /** @description describes conditions which may prevent membership suspension and their actual status */
        SuspendMembershipBlockers: {
            finance: components["schemas"]["SuspendMembershipBlockersFinanceApiDto"];
        };
        SuspendMembershipBlockersFinanceApiDto: {
            /** @description tells if finance account balance permits membership suspension */
            status: boolean;
        };
        EntityModelEditMyDetailsForm: {
            identityCard?: components["schemas"]["IdentityCardApiDto"];
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            address: components["schemas"]["AddressApiDto"];
            contact?: components["schemas"]["Contact"];
            guardians?: components["schemas"]["LegalGuardianApiDto"][];
            /**
             * Format: int32
             * @description SI chip used by member
             */
            siCard?: number;
            /** @description Bank account number of the club member IBAN */
            bankAccount?: string;
            /** @description Dietary restrictions of the club member */
            dietaryRestrictions?: string;
            drivingLicence?: ("B" | "BE" | "C" | "D")[];
            /** @description Whether the club member has completed the medic course */
            medicCourse?: boolean;
            links?: components["schemas"]["Link"][];
        };
        EntityModelEditAnotherMemberDetailsForm: {
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /**
             * Format: date
             * @description Date of birth of the club member
             */
            dateOfBirth: string;
            /** @description Birth certificate number for Czech citizens */
            birthCertificateNumber?: string;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            /** @enum {string} */
            sex: "male" | "female";
            links?: components["schemas"]["Link"][];
        };
        EntityModelMemberRegistrationForm: {
            /** @description First name of the club member */
            firstName: string;
            /** @description Last name of the club member */
            lastName: string;
            /** @enum {string} */
            sex: "male" | "female";
            /**
             * Format: date
             * @description Date of birth of the club member
             */
            dateOfBirth: string;
            /** @description Birth certificate number for Czech citizens */
            birthCertificateNumber?: string;
            /** @description two letter country code, ISO 3166-1 alpha-2 */
            nationality: string;
            address: components["schemas"]["AddressApiDto"];
            contact?: components["schemas"]["Contact"];
            guardians?: components["schemas"]["LegalGuardianApiDto"][];
            /**
             * Format: int32
             * @description SI chip used by member
             */
            siCard?: number;
            /** @description Bank account number of the club member IBAN */
            bankAccount?: string;
            /** @description ORIS registration number */
            registrationNumber?: string;
            /**
             * Format: int32
             * @description Oris ID of registered orienteering runner
             */
            orisId?: number;
            links?: components["schemas"]["Link"][];
        };
        GetAllGrants200ResponseApiDto: {
            links?: components["schemas"]["Link"][];
            grants?: components["schemas"]["GlobalGrantDetailApiDto"][];
        };
        GlobalGrantDetailApiDto: {
            links?: components["schemas"]["Link"][];
            /** @enum {string} */
            grant?: "members:register" | "members:edit" | "members:suspendMembership" | "members:resumeMembership" | "system:admin" | "members:permissions";
            /** @description User friendly description of the grant */
            description?: string;
        };
        EntityModelEventResponse_Summary: {
            /** Format: int32 */
            id?: number;
            /** Format: date */
            date?: string;
            name?: string;
            location?: string;
            organizer?: string;
            /** @enum {string} */
            type?: "TRAINING" | "COMPETITION";
            web?: string;
            /** Format: date */
            registrationDeadline?: string;
            /** Format: int32 */
            coordinator?: number;
            links?: components["schemas"]["Link"][];
        };
        PagedModelEntityModelEventResponse_Summary: {
            links?: components["schemas"]["Link"][];
            content?: components["schemas"]["EntityModelEventResponse_Summary"][];
            page?: components["schemas"]["PageMetadata"];
        };
        EntityModelEventResponse_Detailed: {
            /** Format: int32 */
            id?: number;
            /** Format: date */
            date?: string;
            name?: string;
            location?: string;
            organizer?: string;
            /** @enum {string} */
            type?: "TRAINING" | "COMPETITION";
            web?: string;
            /** Format: date */
            registrationDeadline?: string;
            /** Format: int32 */
            coordinator?: number;
            registrations?: components["schemas"]["EventRegistrationResponse_Detailed"][];
            links?: components["schemas"]["Link"][];
        };
        EventRegistrationResponse_Detailed: {
            /** Format: int32 */
            memberId?: number;
            category?: string;
        };
        RepresentationModelEntityModelEventRegistrationForm: {
            links?: components["schemas"]["Link"][];
        };
        RepresentationModelObject: {
            links?: components["schemas"]["Link"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUserGrants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Edit member grants form content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberGrantsForm"];
                };
            };
        };
    };
    updateUserGrants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of application user */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MemberGrantsForm"];
            };
        };
        responses: {
            /** @description User grants were successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    membersMemberIdSuspendMembershipFormGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description details about member account important for membership suspension */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelMembershipSuspensionInfoApiDto"];
                    "application/klabis+json": components["schemas"]["EntityModelMembershipSuspensionInfoApiDto"];
                    "application/hal+json": components["schemas"]["EntityModelMembershipSuspensionInfoApiDto"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelMembershipSuspensionInfoApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    membersMemberIdSuspendMembershipFormPut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MembershipSuspensionInfoRequestDto"];
            };
        };
        responses: {
            /** @description Membership of club member was suspended successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description It's not possible to suspend membership for club member. See response body for actual reason(s). You may use `force` to override these reasons. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    resumeMembership: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    membersMemberIdEditOwnMemberInfoFormGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Club member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelEditMyDetailsForm"];
                    "application/klabis+json": components["schemas"]["EntityModelEditMyDetailsForm"];
                    "application/hal+json": components["schemas"]["EntityModelEditMyDetailsForm"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelEditMyDetailsForm"];
                };
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    membersMemberIdEditOwnMemberInfoFormPut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditMyDetailsForm"];
            };
        };
        responses: {
            /** @description Club member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    getMemberEditByAdminForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Club member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelEditAnotherMemberDetailsForm"];
                    "application/klabis+json": components["schemas"]["EntityModelEditAnotherMemberDetailsForm"];
                    "application/hal+json": components["schemas"]["EntityModelEditAnotherMemberDetailsForm"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelEditAnotherMemberDetailsForm"];
                };
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    putMemberEditByAdminForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditAnotherMemberDetailsForm"];
            };
        };
        responses: {
            /** @description Club member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet403ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    getRegistrationForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID události */
                eventId: number;
                /** @description ID clena */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prepared event registration form for member and event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/klabis+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/hal+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/klabis+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/hal+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/klabis+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/hal+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/klabis+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/hal+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                };
            };
            /** @description Event with given doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/klabis+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/hal+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelEntityModelEventRegistrationForm"];
                };
            };
        };
    };
    submitRegistrationForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID události */
                eventId: number;
                /** @description ID clena */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRegistrationForm"];
            };
        };
        responses: {
            /** @description Member was registered to event successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Event with given doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelEventRegistration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orisSynchronizeEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SynchronizeEventsRequest"];
            };
        };
        responses: {
            /** @description Successfully triggered events synchronization */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRegistrationForm_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelMemberRegistrationForm"];
                    "application/klabis+json": components["schemas"]["EntityModelMemberRegistrationForm"];
                    "application/hal+json": components["schemas"]["EntityModelMemberRegistrationForm"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelMemberRegistrationForm"];
                };
            };
        };
    };
    memberRegistrationsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberRegistrationForm"];
            };
        };
        responses: {
            /** @description Registration was processed successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet403ResponseApiDto"];
                };
            };
            /** @description Conflict - Member already exists (usually registration was submitted with existing registration number) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["MemberRegistrationsPost409ResponseApiDto"];
                };
            };
        };
    };
    registrationNumberGet: {
        parameters: {
            query: {
                dateOfBirth: string;
                sex: "male" | "female";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recommended (available) registration number for new member registration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationNumberGet200ResponseApiDto"];
                    "application/problem+json": components["schemas"]["RegistrationNumberGet200ResponseApiDto"];
                };
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    orisUserInfoRegNumGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Registration number of user to retrieve ORIS data about */
                regNum: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available information about user read from ORIS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ORISUserInfo"];
                    "application/problem+json": components["schemas"]["ORISUserInfo"];
                };
            };
            /** @description Invalid user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet400ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description User is not allowed to perform requested operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet403ResponseApiDto"];
                    "application/problem+json": components["schemas"]["MembersMemberIdEditMemberInfoFormGet403ResponseApiDto"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    membersGet: {
        parameters: {
            query?: {
                suspended?: boolean;
                /** @description Zero-based page index (0..N) */
                page?: number;
                /** @description The size of the page to be returned */
                size?: number;
                /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                sort?: string[];
                /**
                 * @description Defines how many data are returned for every item
                 * @example SUMMARY
                 */
                view?: "SUMMARY" | "DETAILED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of club members */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedModelEntityModelMembersApiResponse"];
                    "application/klabis+json": components["schemas"]["PagedModelEntityModelMembersApiResponse"];
                    "application/hal+json": components["schemas"]["PagedModelEntityModelMembersApiResponse"];
                    "application/prs.hal-forms+json": components["schemas"]["PagedModelEntityModelMembersApiResponse"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    membersMemberIdGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of member */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelMembersApiResponse"];
                    "application/klabis+json": components["schemas"]["EntityModelMembersApiResponse"];
                    "application/hal+json": components["schemas"]["EntityModelMembersApiResponse"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelMembersApiResponse"];
                };
            };
            /** @description Missing required user authentication or authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
            /** @description Requested resource wasn't found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["RFC7807ErrorResponseApiDto"];
                };
            };
        };
    };
    getAllGrants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of grants which can be assigned to members */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllGrants200ResponseApiDto"];
                };
            };
        };
    };
    getEvents: {
        parameters: {
            query?: {
                "registeredMember.value"?: number;
                /** @description Zero-based page index (0..N) */
                page?: number;
                /** @description The size of the page to be returned */
                size?: number;
                /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedModelEntityModelEventResponse_Summary"];
                    "application/klabis+json": components["schemas"]["PagedModelEntityModelEventResponse_Summary"];
                    "application/hal+json": components["schemas"]["PagedModelEntityModelEventResponse_Summary"];
                    "application/prs.hal-forms+json": components["schemas"]["PagedModelEntityModelEventResponse_Summary"];
                };
            };
        };
    };
    getEventById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID eventu */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityModelEventResponse_Detailed"];
                    "application/klabis+json": components["schemas"]["EntityModelEventResponse_Detailed"];
                    "application/hal+json": components["schemas"]["EntityModelEventResponse_Detailed"];
                    "application/prs.hal-forms+json": components["schemas"]["EntityModelEventResponse_Detailed"];
                };
            };
        };
    };
    rootNavigation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepresentationModelObject"];
                    "application/klabis+json": components["schemas"]["RepresentationModelObject"];
                    "application/hal+json": components["schemas"]["RepresentationModelObject"];
                    "application/prs.hal-forms+json": components["schemas"]["RepresentationModelObject"];
                };
            };
        };
    };
}
