/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.oris.infrastructure.restapi;

import club.klabis.members.infrastructure.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto;
import club.klabis.members.infrastructure.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto;
import club.klabis.oris.infrastructure.restapi.dto.ORISUserInfoApiDto;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.Pattern;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
@Tag(name = "ORIS", description = "Integration endpoints with ORIS - https://oris.orientacnisporty.cz/")
@SecurityRequirement(name = "klabis", scopes = {"openapi"})
public interface OrisApi {

    /**
     * GET /oris/userInfo/{regNum} : Get information about user from ORIS
     * #### Required authorization requires &#x60;members:register&#x60; grant
     *
     * @param regNum Registration number of user to retrieve ORIS data about (required)
     * @return Available information about user read from ORIS (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "orisUserInfoRegNumGet",
            summary = "Get information about user from ORIS",
            description = "#### Required authorization requires `members:register` grant ",
            tags = {"ORIS"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Available information about user read from ORIS", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ORISUserInfoApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ORISUserInfoApiDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/oris/userInfo/{regNum}",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<ORISUserInfoApiDto> orisUserInfoRegNumGet(
            @Pattern(regexp = "^[A-Z]{3}[0-9]{4}$") @Parameter(name = "regNum", description = "Registration number of user to retrieve ORIS data about", required = true, in = ParameterIn.PATH) @PathVariable("regNum") String regNum
    );

}
