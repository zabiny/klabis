/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.events.infrastructure.restapi;

import club.klabis.events.application.EventsRepository;
import club.klabis.events.domain.Event;
import club.klabis.events.domain.EventException;
import club.klabis.events.infrastructure.restapi.dto.EventListItemApiDto;
import club.klabis.events.infrastructure.restapi.dto.GetEvents200ResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@Validated
@Tag(name = "Events")
@SecurityRequirement(name = "klabis", scopes = {"openapi"})
@RestController
public class EventsController {
    private final EventsRepository eventsRepository;

    EventsController(EventsRepository eventsRepository) {
        this.eventsRepository = eventsRepository;
    }

    /**
     * GET /events : Returns events
     *
     * @return Events (status code 200)
     */
    @Operation(
            operationId = "getEvents",
            summary = "Returns events",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Events", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = GetEvents200ResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/events",
            produces = {"application/json"}
    )
    ResponseEntity<GetEvents200ResponseApiDto> getEvents() {
        List<EventListItemApiDto> items = eventsRepository.findAll()
                .stream().map(EventsController::toListDto).toList();

        return ResponseEntity.ok(new GetEvents200ResponseApiDto().items(items));
    }

    @Operation(
            operationId = "getEventById",
            summary = "Returns event details",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Event details", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = EventListItemApiDto.class))
                    })
            },
            parameters = {
                    @Parameter(name = "eventId", description = "ID eventu", required = true, in = ParameterIn.PATH, schema = @Schema(type = "integer"))
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/event/{eventId}",
            produces = {"application/json"}
    )
    ResponseEntity<EventListItemApiDto> getEventById(@PathVariable("eventId") int eventId) {
        Event event = eventsRepository.findById(new Event.Id(eventId))
                .orElseThrow(() -> EventException.createEventNotFoundException(new Event.Id(eventId)));

        return ResponseEntity.ok(toDetailDto(event));
    }

    private static EventListItemApiDto toListDto(Event oriEvent) {
        return new EventListItemApiDto()
                .id(oriEvent.getId().value())
                .date(oriEvent.getDate())
                .name(oriEvent.getName())
                //.type(EventListItemApiDto.TypeEnum.S)
                .organizer(oriEvent.getOrganizer())
                //.coordinator("")
                .registrationDeadline(oriEvent.getRegistrationDeadline());
    }

    static EventListItemApiDto toDetailDto(Event event) {
        return toListDto(event);
    }


}
