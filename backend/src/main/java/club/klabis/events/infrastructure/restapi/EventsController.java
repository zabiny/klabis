/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.events.infrastructure.restapi;

import club.klabis.events.application.EventsRepository;
import club.klabis.events.domain.Event;
import club.klabis.events.domain.EventException;
import club.klabis.events.infrastructure.restapi.dto.EventResponseItem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springdoc.core.annotations.ParameterObject;
import org.springdoc.core.converters.models.PageableAsQueryParam;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.PagedModel;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Validated
@Tag(name = "Events")
@SecurityRequirement(name = "klabis", scopes = {"openapi"})
@RestController
@RequestMapping(value = "/events", produces = {"application/json", "application/klabis+json", "application/hal+json"})
public class EventsController {
    private final EventsRepository eventsRepository;
    private final EventModelAssembler eventModelAssembler;

    EventsController(EventsRepository eventsRepository, EventModelAssembler eventModelAssembler) {
        this.eventsRepository = eventsRepository;
        this.eventModelAssembler = eventModelAssembler;
    }

    /**
     * GET /events : Returns events
     *
     * @return Events (status code 200)
     */
    @Operation(
            operationId = "getEvents",
            summary = "Returns events",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Events")
            }
    )
    @GetMapping
    @PageableAsQueryParam
    ResponseEntity<CollectionModel<EventResponseItem>> getEvents(@ParameterObject EventsRepository.EventsQuery filter, @Parameter(hidden = true) Pageable pageable) {
        Page<Event> data = eventsRepository.findEvents(filter, pageable);

        PagedModel<EventResponseItem> responseModel = eventModelAssembler.toPagedModel(data);

        return ResponseEntity.ok(responseModel);
    }

    @Operation(
            operationId = "getEventById",
            summary = "Returns event details",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Event details")
            },
            parameters = {
                    @Parameter(name = "eventId", description = "ID eventu", required = true, in = ParameterIn.PATH, schema = @Schema(type = "integer"))
            }
    )
    @GetMapping(
            value = "/{eventId}"
    )
    ResponseEntity<EventResponseItem> getEventById(@PathVariable("eventId") int eventId) {
        EventResponseItem response = eventsRepository.findById(new Event.Id(eventId))
                .map(eventModelAssembler::toModel)
                .orElseThrow(() -> EventException.createEventNotFoundException(new Event.Id(eventId)));

        return ResponseEntity.ok(response);
    }

}
