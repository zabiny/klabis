/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.events.infrastructure.restapi;

import club.klabis.events.application.EventsRepository;
import club.klabis.events.domain.Event;
import club.klabis.events.domain.EventException;
import club.klabis.events.infrastructure.restapi.dto.EventResponse;
import club.klabis.members.infrastructure.restapi.ResponseViews;
import club.klabis.shared.config.restapi.ApiController;
import com.fasterxml.jackson.annotation.JsonView;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springdoc.core.annotations.ParameterObject;
import org.springdoc.core.converters.models.PageableAsQueryParam;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.PagedModel;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@ExposesResourceFor(Event.class)
@ApiController(openApiTagName = "Events", securityScopes = {"events"}, path = "/events")
public class EventsController {
    private final EventsRepository eventsRepository;
    private final EventModelMapper eventModelMapper;

    EventsController(EventsRepository eventsRepository, EventModelMapper eventModelMapper) {
        this.eventsRepository = eventsRepository;
        this.eventModelMapper = eventModelMapper;
    }

    /**
     * GET /events : Returns events
     *
     * @return Events (status code 200)
     */
    @Operation(
            operationId = "getEvents",
            summary = "Returns events",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Events")
            }
    )
    @GetMapping
    @PageableAsQueryParam
    @JsonView(ResponseViews.Summary.class)
    PagedModel<EntityModel<EventResponse>> getEvents(@ParameterObject EventsRepository.EventsQuery filter, @Parameter(hidden = true) Pageable pageable) {
        Page<Event> data = eventsRepository.findEvents(filter, pageable);

        return eventModelMapper.toPagedResponse(data);
    }

    @Operation(
            operationId = "getEventById",
            summary = "Returns event details",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Event details")
            },
            parameters = {
                    @Parameter(name = "eventId", description = "ID eventu", required = true, in = ParameterIn.PATH, schema = @Schema(type = "integer"))
            }
    )
    @GetMapping(
            value = "/{eventId}"
    )
    @JsonView(ResponseViews.Detailed.class)
    EntityModel<EventResponse> getEventById(@PathVariable("eventId") Event.Id eventId) {
        return eventsRepository.findById(eventId)
                .map(eventModelMapper::toResponseModel)
                .orElseThrow(() -> EventException.createEventNotFoundException(eventId));
    }

}