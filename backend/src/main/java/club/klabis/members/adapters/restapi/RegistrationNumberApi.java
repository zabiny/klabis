/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.adapters.restapi;

import club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto;
import club.klabis.members.adapters.restapi.dto.RegistrationNumberGet200ResponseApiDto;
import club.klabis.members.adapters.restapi.dto.SexApiDto;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.time.LocalDate;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-25T23:04:18.674684470+02:00[Europe/Prague]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "members", description = "Club members")
public interface RegistrationNumberApi {

    /**
     * GET /registrationNumber : Get recommended registration number for sex and date of birth
     * #### Required authorization requires &#x60;members:register&#x60; grant
     *
     * @param dateOfBirth (required)
     * @param sex         (required)
     * @return Recommended (available) registration number for new member registration (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "registrationNumberGet",
            summary = "Get recommended registration number for sex and date of birth",
            description = "#### Required authorization requires `members:register` grant ",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Recommended (available) registration number for new member registration", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RegistrationNumberGet200ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RegistrationNumberGet200ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/registrationNumber",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<RegistrationNumberGet200ResponseApiDto> registrationNumberGet(
            @NotNull @Parameter(name = "dateOfBirth", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateOfBirth", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dateOfBirth,
            @NotNull @Parameter(name = "sex", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sex", required = true) SexApiDto sex
    );

}
