/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.adapters.restapi;

import club.klabis.members.MemberId;
import club.klabis.members.adapters.restapi.dto.MembersListItemsInnerApiDto;
import club.klabis.members.application.MembersRepository;
import club.klabis.members.domain.Member;
import club.klabis.members.domain.MemberNotFoundException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.core.convert.ConversionService;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Validated
@Tag(name = "Members")
@RestController
public class MembersApi {

    private final MembersRepository membersRepository;
    private final ConversionService conversionService;

    public MembersApi(MembersRepository membersRepository, ConversionService conversionService) {
        this.membersRepository = membersRepository;
        this.conversionService = conversionService;
    }

    /**
     * GET /members : List all club members
     * Returns a list of all club members
     *
     * @param view      Defines set of returned data  | view option | description                                                                                   | |-------------|-----------------------------------------------------------------------------------------------| | &#x60;full&#x60;        | all member data that are displayable to the user are returned                                 | | &#x60;compact&#x60;     | &#x60;id&#x60;, &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;registrationNumber&#x60; are returned                             |  (optional, default to compact)
     * @param suspended | value | effect | |---|---| | &#x60;true&#x60; | returns both active and suspended members |  | &#x60;false&#x60; | return only active members |  (optional, default to false)
     * @return A list of club members (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "membersGet",
            summary = "List all club members",
            description = "Returns a list of all club members",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of club members", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/klabis+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/hal+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/klabis+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/hal+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members",
            produces = {"application/json", "application/klabis+json", "application/hal+json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.MembersListApiDto> membersGet(
            @Parameter(name = "view", description = "Defines set of returned data  | view option | description                                                                                   | |-------------|-----------------------------------------------------------------------------------------------| | `full`        | all member data that are displayable to the user are returned                                 | | `compact`     | `id`, `firstName`, `lastName`, `registrationNumber` are returned                             | ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "view", required = false, defaultValue = "compact") String view,
            @Parameter(name = "suspended", description = "| value | effect | |---|---| | `true` | returns both active and suspended members |  | `false` | return only active members | ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended
    ) {
        List<? extends MembersListItemsInnerApiDto> result = membersRepository.findAll(
                        suspended)
                .stream()
                .map(t -> convertToApiDto(t, view))
                .toList();
        return ResponseEntity.ok(club.klabis.members.adapters.restapi.dto.MembersListApiDto.builder()
                .items((List<club.klabis.members.adapters.restapi.dto.MembersListItemsInnerApiDto>) result)
                .build());
    }

    ;

    /**
     * GET /members/{memberId} : Get member by ID
     * Returns a member
     *
     * @param memberId ID of member (required)
     * @return A single member (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdGet",
            summary = "Get member by ID",
            description = "Returns a member",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A single member", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}",
            produces = {"application/json", "application/problem+json"}
    )
    public ResponseEntity<club.klabis.members.adapters.restapi.dto.MemberApiDto> membersMemberIdGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) {
        return membersRepository.findById(new MemberId(memberId))
                .map(m -> mapToResponseEntity(m, club.klabis.members.adapters.restapi.dto.MemberApiDto.class))
                .orElseThrow(() -> new MemberNotFoundException(new MemberId(memberId)));
    }

    ;

    private club.klabis.members.adapters.restapi.dto.MembersListItemsInnerApiDto convertToApiDto(Member item, String view) {
        if ("full".equalsIgnoreCase(view)) {
            return conversionService.convert(item, club.klabis.members.adapters.restapi.dto.MemberApiDto.class);
        } else {
            return conversionService.convert(item,
                    club.klabis.members.adapters.restapi.dto.MemberViewCompactApiDto.class);
        }
    }

    private <T> ResponseEntity<T> mapToResponseEntity(Object data, Class<T> apiDtoType) {
        T payload = conversionService.convert(data, apiDtoType);
        return ResponseEntity.ok(payload);
    }

}
