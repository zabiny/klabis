/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.adapters.restapi;

import club.klabis.members.adapters.restapi.dto.MemberGrantsFormApiDto;
import club.klabis.members.adapters.restapi.dto.MembershipSuspensionInfoApiDto;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-25T23:04:18.674684470+02:00[Europe/Prague]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "members", description = "Club members")
public interface MembersApi {

    /**
     * GET /members/{memberId}/editByAdminForm : Returns data for edit member information form
     * Returns data for edit member information form  #### Required authorization requires &#x60;members:suspendMembership&#x60; grant
     *
     * @param memberId ID of member (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "getMemberEditByAdminForm",
            summary = "Returns data for edit member information form",
            description = "Returns data for edit member information form  #### Required authorization requires `members:suspendMembership` grant",
            tags = {"members", "BFF"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.EditAnotherMemberDetailsFormApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.EditAnotherMemberDetailsFormApiDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}/editByAdminForm",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.EditAnotherMemberDetailsFormApiDto> getMemberEditByAdminForm(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * GET /members/{memberId}/changeGrantsForm : returns grants assigned to member
     * Requires &#x60;members:permissions&#x60; grant
     *
     * @param memberId ID of member (required)
     * @return Edit member grants form content (status code 200)
     */
    @Operation(
            operationId = "getMemberGrants",
            summary = "returns grants assigned to member",
            description = "Requires `members:permissions` grant",
            tags = {"security", "BFF"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Edit member grants form content", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberGrantsFormApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}/changeGrantsForm",
            produces = {"application/json"}
    )
    ResponseEntity<MemberGrantsFormApiDto> getMemberGrants(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * GET /members : List all club members
     * Returns a list of all club members
     *
     * @param view      Defines set of returned data  | view option | description                                                                                   | |-------------|-----------------------------------------------------------------------------------------------| | &#x60;full&#x60;        | all member data that are displayable to the user are returned                                 | | &#x60;compact&#x60;     | &#x60;id&#x60;, &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;registrationNumber&#x60; are returned                             |  (optional, default to compact)
     * @param suspended | value | effect | |---|---| | &#x60;true&#x60; | returns both active and suspended members |  | &#x60;false&#x60; | return only active members |  (optional, default to false)
     * @return A list of club members (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "membersGet",
            summary = "List all club members",
            description = "Returns a list of all club members",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of club members", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/klabis+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/hal+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersListApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/klabis+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/hal+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members",
            produces = {"application/json", "application/klabis+json", "application/hal+json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.MembersListApiDto> membersGet(
            @Parameter(name = "view", description = "Defines set of returned data  | view option | description                                                                                   | |-------------|-----------------------------------------------------------------------------------------------| | `full`        | all member data that are displayable to the user are returned                                 | | `compact`     | `id`, `firstName`, `lastName`, `registrationNumber` are returned                             | ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "view", required = false, defaultValue = "compact") String view,
            @Parameter(name = "suspended", description = "| value | effect | |---|---| | `true` | returns both active and suspended members |  | `false` | return only active members | ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended
    );


    /**
     * GET /members/{memberId}/editMemberInfoForm : Returns data for edit member information form
     *
     * @param memberId ID of member (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
            operationId = "membersMemberIdEditMemberInfoFormGet",
            summary = "Returns data for edit member information form",
            deprecated = true,
            tags = {"members", "BFF"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberEditFormApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberEditFormApiDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}/editMemberInfoForm",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.MemberEditFormApiDto> membersMemberIdEditMemberInfoFormGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * PUT /members/{memberId}/editMemberInfoForm : Update member information
     *
     * @param memberId             ID of member (required)
     * @param memberEditFormApiDto (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
            operationId = "membersMemberIdEditMemberInfoFormPut",
            summary = "Update member information",
            deprecated = true,
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/members/{memberId}/editMemberInfoForm",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> membersMemberIdEditMemberInfoFormPut(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "MemberEditFormApiDto", description = "", required = true) @Valid @RequestBody club.klabis.members.adapters.restapi.dto.MemberEditFormApiDto memberEditFormApiDto
    );


    /**
     * GET /members/{memberId}/editOwnMemberInfoForm : Returns data for edit member information form
     *
     * @param memberId ID of member (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdEditOwnMemberInfoFormGet",
            summary = "Returns data for edit member information form",
            tags = {"members", "BFF"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.EditMyDetailsFormApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.EditMyDetailsFormApiDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}/editOwnMemberInfoForm",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.EditMyDetailsFormApiDto> membersMemberIdEditOwnMemberInfoFormGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * PUT /members/{memberId}/editOwnMemberInfoForm : Update member information
     *
     * @param memberId                ID of member (required)
     * @param editMyDetailsFormApiDto (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdEditOwnMemberInfoFormPut",
            summary = "Update member information",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/members/{memberId}/editOwnMemberInfoForm",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> membersMemberIdEditOwnMemberInfoFormPut(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "EditMyDetailsFormApiDto", description = "", required = true) @Valid @RequestBody club.klabis.members.adapters.restapi.dto.EditMyDetailsFormApiDto editMyDetailsFormApiDto
    );


    /**
     * GET /members/{memberId} : Get member by ID
     * Returns a member
     *
     * @param memberId ID of member (required)
     * @return A single member (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdGet",
            summary = "Get member by ID",
            description = "Returns a member",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "A single member", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.MemberApiDto> membersMemberIdGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * GET /members/{memberId}/suspendMembershipForm : Retrieve information about member account status for membership suspension
     * Returns information about member account to be suspended.   #### Required authorization requires &#x60;members:suspendMembership&#x60; grant
     *
     * @param memberId ID of member (required)
     * @return details about member account important for membership suspension (status code 200)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdSuspendMembershipFormGet",
            summary = "Retrieve information about member account status for membership suspension",
            description = "Returns information about member account to be suspended.   #### Required authorization requires `members:suspendMembership` grant ",
            tags = {"members", "BFF"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "details about member account important for membership suspension", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembershipSuspensionInfoApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembershipSuspensionInfoApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/{memberId}/suspendMembershipForm",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<club.klabis.members.adapters.restapi.dto.MembershipSuspensionInfoApiDto> membersMemberIdSuspendMembershipFormGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    );


    /**
     * PUT /members/{memberId}/suspendMembershipForm : Suspend membership for a club member
     * Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP &#39;409&#39; unless &#x60;force&#x3D;true&#x60; parameter was used.  #### Required authorization requires &#x60;members:suspendMembership&#x60; grant
     *
     * @param memberId ID of member (required)
     * @param force    Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension (optional, default to false)
     * @return Membership of club member was suspended successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     * or It&#39;s not possible to suspend membership for club member. See response body for actual reason(s). You may use &#x60;force&#x60; to override these reasons. (status code 409)
     */
    @Operation(
            operationId = "membersMemberIdSuspendMembershipFormPut",
            summary = "Suspend membership for a club member",
            description = "Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP '409' unless `force=true` parameter was used.  #### Required authorization requires `members:suspendMembership` grant ",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Membership of club member was suspended successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "It's not possible to suspend membership for club member. See response body for actual reason(s). You may use `force` to override these reasons.", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdSuspendMembershipFormPut409ResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/members/{memberId}/suspendMembershipForm",
            produces = {"application/problem+json"}
    )
    ResponseEntity<Void> membersMemberIdSuspendMembershipFormPut(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "force", description = "Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension", in = ParameterIn.QUERY) @Valid @RequestParam(value = "force", required = false, defaultValue = "false") Boolean force
    );


    /**
     * PUT /members/{memberId}/editByAdminForm : Update member information
     *
     * @param memberId                           ID of member (required)
     * @param editAnotherMemberDetailsFormApiDto (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "putMemberEditByAdminForm",
            summary = "Update member information",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/members/{memberId}/editByAdminForm",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> putMemberEditByAdminForm(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "EditAnotherMemberDetailsFormApiDto", description = "", required = true) @Valid @RequestBody club.klabis.members.adapters.restapi.dto.EditAnotherMemberDetailsFormApiDto editAnotherMemberDetailsFormApiDto
    );


    /**
     * PUT /members/{memberId}/changeGrantsForm : updates grants assigned to member
     * Requires &#x60;members:permissions&#x60; grant
     *
     * @param memberId               ID of member (required)
     * @param memberGrantsFormApiDto (optional)
     * @return Member grants were successfully updated (status code 200)
     */
    @Operation(
            operationId = "updateMemberGrants",
            summary = "updates grants assigned to member",
            description = "Requires `members:permissions` grant",
            tags = {"security"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Member grants were successfully updated")
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/members/{memberId}/changeGrantsForm",
            consumes = {"application/json"}
    )
    ResponseEntity<Void> updateMemberGrants(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "MemberGrantsFormApiDto", description = "") @Valid @RequestBody(required = false) club.klabis.members.adapters.restapi.dto.MemberGrantsFormApiDto memberGrantsFormApiDto
    );

}
