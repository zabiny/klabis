/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.adapters.restapi;

import club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-25T23:04:18.674684470+02:00[Europe/Prague]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "members", description = "Club members")
public interface MemberRegistrationsApi {

    /**
     * POST /memberRegistrations : Register a new club member
     * Registers a new club member with the provided details.  #### Required authorization requires &#x60;members:register&#x60; grant
     *
     * @param memberRegistrationFormApiDto (required)
     * @return Registration was processed successfully (status code 201)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Conflict - Member already exists (usually registration was submitted with existing registration number) (status code 409)
     */
    @Operation(
            operationId = "memberRegistrationsPost",
            summary = "Register a new club member",
            description = "Registers a new club member with the provided details.  #### Required authorization requires `members:register` grant ",
            tags = {"members"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Registration was processed successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MembersMemberIdEditMemberInfoFormGet403ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict - Member already exists (usually registration was submitted with existing registration number)", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.adapters.restapi.dto.MemberRegistrationsPost409ResponseApiDto.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "klabis", scopes = {"openid"})
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/memberRegistrations",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> memberRegistrationsPost(
            @Parameter(name = "MemberRegistrationFormApiDto", description = "", required = true) @Valid @RequestBody club.klabis.members.adapters.restapi.dto.MemberRegistrationFormApiDto memberRegistrationFormApiDto
    );

}
