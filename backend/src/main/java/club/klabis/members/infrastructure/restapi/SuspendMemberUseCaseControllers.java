/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.infrastructure.restapi;

import club.klabis.members.MemberId;
import club.klabis.members.application.MembershipSuspendUseCase;
import club.klabis.members.domain.MemberNotFoundException;
import club.klabis.members.infrastructure.restapi.dto.MembershipSuspensionInfoApiDto;
import club.klabis.members.infrastructure.restapi.dto.MembershipSuspensionInfoRequestDto;
import club.klabis.shared.ConversionService;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import club.klabis.shared.config.restapi.ApiController;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import static club.klabis.shared.config.hateoas.forms.KlabisHateoasImprovements.affordBetter;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

@ApiController(path = "/members/{memberId}", openApiTagName = "Suspend membership", securityScopes = "members")
public class SuspendMemberUseCaseControllers {

    private final ConversionService conversionService;
    private final MembershipSuspendUseCase useCase;

    public SuspendMemberUseCaseControllers(ConversionService conversionService, MembershipSuspendUseCase useCase) {
        this.conversionService = conversionService;
        this.useCase = useCase;
    }

    /**
     * GET /members/{memberId}/suspendMembershipForm : Retrieve information about member account status for membership suspension
     * Returns information about member account to be suspended.   #### Required authorization requires &#x60;members:suspendMembership&#x60; grant
     *
     * @param memberId ID of member (required)
     * @return details about member account important for membership suspension (status code 200)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdSuspendMembershipFormGet",
            summary = "Retrieve information about member account status for membership suspension",
            description = "Returns information about member account to be suspended.   #### Required authorization requires `members:suspendMembership` grant ",
            responses = {
                    @ApiResponse(responseCode = "200", description = "details about member account important for membership suspension", content = {
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping("/suspendMembershipForm")
    EntityModel<MembershipSuspensionInfoApiDto> membersMemberIdSuspendMembershipFormGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") MemberId memberId
    ) {
        return useCase.getSuspensionInfoForMember(memberId)
                .map(d -> conversionService.convert(d,
                        club.klabis.members.infrastructure.restapi.dto.MembershipSuspensionInfoApiDto.class))
                .map(form -> EntityModel.of(form, WebMvcLinkBuilder.linkTo(getClass(), memberId).withSelfRel()
                        .andAffordance(affordBetter(methodOn(getClass()).membersMemberIdSuspendMembershipFormPut(
                                memberId,
                                null))).withRel("submit")))
                .orElseThrow(() -> new MemberNotFoundException(memberId));
    }

    /**
     * PUT /members/{memberId}/suspendMembershipForm : Suspend membership for a club member
     * Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP &#39;409&#39; unless &#x60;force&#x3D;true&#x60; parameter was used.  #### Required authorization requires &#x60;members:suspendMembership&#x60; grant
     *
     * @param memberId ID of member (required)
     * @param force    Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension (optional, default to false)
     * @return Membership of club member was suspended successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     * or It&#39;s not possible to suspend membership for club member. See response body for actual reason(s). You may use &#x60;force&#x60; to override these reasons. (status code 409)
     */
    @Operation(
            operationId = "membersMemberIdSuspendMembershipFormPut",
            summary = "Suspend membership for a club member",
            description = "Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP '409' unless `force=true` parameter was used.  #### Required authorization requires `members:suspendMembership` grant ",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Membership of club member was suspended successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.members.infrastructure.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "It's not possible to suspend membership for club member. See response body for actual reason(s). You may use `force` to override these reasons.", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @PutMapping("/suspendMembershipForm")
    ResponseEntity<Void> membersMemberIdSuspendMembershipFormPut(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") MemberId memberId,
            @Parameter(name = "force", description = "Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension") @Valid @RequestBody MembershipSuspensionInfoRequestDto form) {
        useCase.suspendMembershipForMember(memberId, form.force());
        return ResponseEntity.ok(null);
    }


    @PutMapping(path = "/resumeMembershipForm")
    ResponseEntity<Void> resumeMembership(int memberId) {
        useCase.resumeMembership(new MemberId(memberId));
        return ResponseEntity.ok(null);
    }
}
