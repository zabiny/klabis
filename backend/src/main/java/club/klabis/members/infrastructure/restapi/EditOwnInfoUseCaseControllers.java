/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.infrastructure.restapi;

import club.klabis.members.MemberId;
import club.klabis.members.application.EditMemberInfoUseCase;
import club.klabis.members.domain.forms.EditOwnMemberInfoForm;
import club.klabis.members.infrastructure.restapi.dto.EditMyDetailsFormApiDto;
import club.klabis.shared.ConversionService;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import club.klabis.shared.config.restapi.ApiController;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import org.springframework.hateoas.EntityModel;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import static club.klabis.shared.config.hateoas.forms.KlabisHateoasImprovements.affordBetter;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

@ApiController(path = "/members/{memberId}/editOwnMemberInfoForm", openApiTagName = "Edit members", securityScopes = "members")
public class EditOwnInfoUseCaseControllers {

    private final EditMemberInfoUseCase editMemberUseCase;
    private final ConversionService conversionService;

    public EditOwnInfoUseCaseControllers(EditMemberInfoUseCase editMemberUseCase, ConversionService conversionService) {
        this.editMemberUseCase = editMemberUseCase;
        this.conversionService = conversionService;
    }

    /**
     * GET /members/{memberId}/editOwnMemberInfoForm : Returns data for edit member information form
     *
     * @param memberId ID of member (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdEditOwnMemberInfoFormGet",
            summary = "Returns data for edit member information form",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully", content = {
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping
    public EntityModel<EditMyDetailsFormApiDto> membersMemberIdEditOwnMemberInfoFormGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) {
        EditMyDetailsFormApiDto formData = conversionService.convert(editMemberUseCase.getEditOwnMemberInfoForm(new MemberId(
                memberId)), EditMyDetailsFormApiDto.class);

        return EntityModel.of(formData)
                .add(linkTo(getClass(), memberId).withSelfRel()
                        .andAffordance(affordBetter(methodOn(getClass()).membersMemberIdEditOwnMemberInfoFormPut(
                                memberId,
                                null))));
    }


    /**
     * PUT /members/{memberId}/editOwnMemberInfoForm : Update member information
     *
     * @param memberId                ID of member (required)
     * @param editMyDetailsFormApiDto (required)
     * @return Club member updated successfully (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or User is not allowed to perform requested operation (status code 403)
     * or Missing required user authentication or authentication failed (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdEditOwnMemberInfoFormPut",
            summary = "Update member information",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Club member updated successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "User is not allowed to perform requested operation", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @PutMapping
    ResponseEntity<Void> membersMemberIdEditOwnMemberInfoFormPut(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId,
            @Parameter(name = "EditMyDetailsFormApiDto", description = "", required = true) @Valid @RequestBody EditMyDetailsFormApiDto editMyDetailsFormApiDto
    ) {
        editMemberUseCase.editMember(new MemberId(memberId),
                conversionService.convert(editMyDetailsFormApiDto, EditOwnMemberInfoForm.class));
        return ResponseEntity.ok(null);
    }

}
