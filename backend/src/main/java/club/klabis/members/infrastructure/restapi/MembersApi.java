/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.infrastructure.restapi;

import club.klabis.members.MemberId;
import club.klabis.members.application.MembersRepository;
import club.klabis.members.domain.Member;
import club.klabis.members.domain.MemberNotFoundException;
import club.klabis.members.infrastructure.restapi.dto.MembersApiResponse;
import club.klabis.shared.config.restapi.ApiController;
import club.klabis.shared.config.restapi.JsonViewMapping;
import club.klabis.shared.config.restapi.JsonViewParameter;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import org.springdoc.core.converters.models.PageableAsQueryParam;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.PagedModel;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

@ExposesResourceFor(Member.class)
@ApiController(openApiTagName = "Members", path = "/members", securityScopes = {"members"})
public class MembersApi {

    private final MembersRepository membersRepository;
    private final MemberModelAssembler memberModelAssembler;

    public MembersApi(MembersRepository membersRepository, MemberModelAssembler memberModelAssembler) {
        this.membersRepository = membersRepository;
        this.memberModelAssembler = memberModelAssembler;
    }

    /**
     * GET /members : List all club members
     * Returns a list of all club members
     *
     * @param suspended | value | effect | |---|---| | &#x60;true&#x60; | returns both active and suspended members |  | &#x60;false&#x60; | return only active members |  (optional, default to false)
     * @return A list of club members (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "membersGet",
            summary = "Club members list",
            description = "Returns club members",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of club members"),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping
    @PageableAsQueryParam
    @JsonViewParameter(name = "view", defaultValue = "SUMMARY", mapping = {
            @JsonViewMapping(name = "SUMMARY", jsonView = ResponseViews.Summary.class),
            @JsonViewMapping(name = "DETAILED", jsonView = ResponseViews.Detailed.class)
    })
    PagedModel<EntityModel<MembersApiResponse>> membersGet(
            @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended,
            @Parameter(hidden = true) Pageable pageable
    ) {
        Page<Member> result = membersRepository.findAllBySuspended(suspended,
                memberModelAssembler.convertAttributeNamesToEntity(pageable));

        return memberModelAssembler.toPagedResponse(result);
    }

    /**
     * GET /members/{memberId} : Get member by ID
     * Returns a member
     *
     * @param memberId ID of member (required)
     * @return A single member (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdGet",
            summary = "Get member by ID",
            description = "Returns a member",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A single member"),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping("/{memberId}")
    public EntityModel<MembersApiResponse> membersMemberIdGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) {
        return membersRepository.findById(new MemberId(memberId))
                .map(memberModelAssembler::toResponseModel)
                .orElseThrow(() -> new MemberNotFoundException(new MemberId(memberId)));
    }

}
