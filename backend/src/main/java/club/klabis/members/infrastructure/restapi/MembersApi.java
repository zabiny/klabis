/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.members.infrastructure.restapi;

import club.klabis.members.MemberId;
import club.klabis.members.application.MembersRepository;
import club.klabis.members.domain.Member;
import club.klabis.members.domain.MemberNotFoundException;
import club.klabis.members.infrastructure.restapi.dto.MembersApiResponse;
import club.klabis.shared.config.restapi.JsonViewMapping;
import club.klabis.shared.config.restapi.JsonViewParameter;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springdoc.core.converters.models.PageableAsQueryParam;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedModel;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Validated
@Tag(name = "Members")
@SecurityRequirement(name = "klabis", scopes = {"openapi"})
@RestController
@RequestMapping(value = "/members", produces = {"application/json", "application/klabis+json", "application/hal+json"})
public class MembersApi {

    private final MembersRepository membersRepository;
    private final MemberModelAssembler memberModelAssembler;
    private final PagedResourcesAssembler<Member> pagedResourcesAssembler;

    public MembersApi(MembersRepository membersRepository, MemberModelAssembler memberModelAssembler, PagedResourcesAssembler<Member> pagedResourcesAssembler) {
        this.membersRepository = membersRepository;
        this.memberModelAssembler = memberModelAssembler;
        this.pagedResourcesAssembler = pagedResourcesAssembler;
    }

    /**
     * GET /members : List all club members
     * Returns a list of all club members
     *
     * @param view      Defines set of returned data  | view option | description                                                                                   | |-------------|-----------------------------------------------------------------------------------------------| | &#x60;full&#x60;        | all member data that are displayable to the user are returned                                 | | &#x60;compact&#x60;     | &#x60;id&#x60;, &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;registrationNumber&#x60; are returned                             |  (optional, default to compact)
     * @param suspended | value | effect | |---|---| | &#x60;true&#x60; | returns both active and suspended members |  | &#x60;false&#x60; | return only active members |  (optional, default to false)
     * @return A list of club members (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "membersGet",
            summary = "Club members list",
            description = "Returns club members",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of club members"),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping
    @PageableAsQueryParam
    @JsonViewParameter(name = "view", defaultValue = "SUMMARY", mapping = {
            @JsonViewMapping(name = "SUMMARY", jsonView = ResponseViews.Summary.class),
            @JsonViewMapping(name = "DETAILED", jsonView = ResponseViews.Detailed.class)
    })
    @Parameter(name = "view", in = ParameterIn.QUERY, description = "Defines how many data are returned for every item", schema = @Schema(type = "string", defaultValue = "DETAILED", allowableValues = {"SUMMARY", "DETAILED"}))
    ResponseEntity<PagedModel<MembersApiResponse>> membersGet(
            @Valid @RequestParam(value = "suspended", required = false, defaultValue = "false") Boolean suspended,
            @Parameter(hidden = true) Pageable pageable
    ) {
        Page<Member> result = membersRepository.findAllBySuspended(suspended, pageable);

        PagedModel<MembersApiResponse> model = pagedResourcesAssembler.toModel(result,
                memberModelAssembler);

        return ResponseEntity.ok(model);
    }

    /**
     * GET /members/{memberId} : Get member by ID
     * Returns a member
     *
     * @param memberId ID of member (required)
     * @return A single member (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "membersMemberIdGet",
            summary = "Get member by ID",
            description = "Returns a member",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A single member"),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = club.klabis.shared.RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @GetMapping("/{memberId}")
    public ResponseEntity<MembersApiResponse> membersMemberIdGet(
            @Parameter(name = "memberId", description = "ID of member", required = true, in = ParameterIn.PATH) @PathVariable("memberId") Integer memberId
    ) {
        return membersRepository.findById(new MemberId(memberId))
                .map(memberModelAssembler::toModel)
                .map(ResponseEntity::ok)
                .orElseThrow(() -> new MemberNotFoundException(new MemberId(memberId)));
    }

}
