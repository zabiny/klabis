/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package club.klabis.groups.infrastructure.restapi;

import club.klabis.groups.infrastructure.restapi.dto.MembersGroupApiDto;
import club.klabis.groups.infrastructure.restapi.dto.MembersGroupListApiDto;
import club.klabis.members.infrastructure.restapi.dto.MembersMemberIdEditMemberInfoFormGet400ResponseApiDto;
import club.klabis.shared.RFC7807ErrorResponseApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.math.BigDecimal;

@Validated
@Tag(name = "groups", description = "the groups API")
@SecurityRequirement(name = "klabis", scopes = {"openapi"})
public interface MemberGroupsApi {

    /**
     * DELETE /memberGroups/{id} : Delete member group
     *
     * @param id ID of the group (optional)
     * @return Member group deleted (status code 204)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "deleteMemberGroupById",
            summary = "Delete member group",
            tags = {"groups", "WIP"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Member group deleted"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/memberGroups/{id}",
            produces = {"application/problem+json"}
    )
    ResponseEntity<Void> deleteMemberGroupById(
            @Parameter(name = "id", description = "ID of the group", in = ParameterIn.PATH) @PathVariable("id") BigDecimal id
    );


    /**
     * GET /memberGroups/{id} : Returns member group details
     *
     * @param id ID of the group (optional)
     * @return Member groups (status code 200)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "getMemberGroupById",
            summary = "Returns member group details",
            tags = {"groups", "WIP"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Member groups", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = MembersGroupApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersGroupApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class)),
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/memberGroups/{id}",
            produces = {"application/json", "application/problem+json"}
    )
    ResponseEntity<MembersGroupApiDto> getMemberGroupById(
            @Parameter(name = "id", description = "ID of the group", in = ParameterIn.PATH) @PathVariable("id") BigDecimal id
    );


    /**
     * GET /memberGroups : Returns all member groups
     *
     * @return Member groups (status code 200)
     */
    @Operation(
            operationId = "getMemberGroups",
            summary = "Returns all member groups",
            tags = {"groups", "WIP"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Member groups", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = MembersGroupListApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/memberGroups",
            produces = {"application/json"}
    )
    ResponseEntity<MembersGroupListApiDto> getMemberGroups(

    );


    /**
     * POST /memberGroups : Create new group
     *
     * @param membersGroupApiDto (required)
     * @return Member group created (status code 201)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     */
    @Operation(
            operationId = "postMemberGroup",
            summary = "Create new group",
            tags = {"groups", "WIP"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Member group created"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/memberGroups",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> postMemberGroup(
            @Parameter(name = "MembersGroupApiDto", description = "", required = true) @Valid @RequestBody MembersGroupApiDto membersGroupApiDto
    );


    /**
     * PUT /memberGroups/{id} : Update existing member group
     *
     * @param membersGroupApiDto (required)
     * @param id                 ID of the group (optional)
     * @return Member group updated (status code 200)
     * or Invalid user input (status code 400)
     * or Missing required user authentication or authentication failed (status code 401)
     * or Requested resource wasn&#39;t found (status code 404)
     */
    @Operation(
            operationId = "putMemberGroupById",
            summary = "Update existing member group",
            tags = {"groups", "WIP"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Member group updated"),
                    @ApiResponse(responseCode = "400", description = "Invalid user input", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MembersMemberIdEditMemberInfoFormGet400ResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Missing required user authentication or authentication failed", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Requested resource wasn't found", content = {
                            @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RFC7807ErrorResponseApiDto.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/memberGroups/{id}",
            produces = {"application/problem+json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> putMemberGroupById(
            @Parameter(name = "MembersGroupApiDto", description = "", required = true) @Valid @RequestBody MembersGroupApiDto membersGroupApiDto,
            @Parameter(name = "id", description = "ID of the group", in = ParameterIn.PATH) @PathVariable("id") BigDecimal id
    );

}
