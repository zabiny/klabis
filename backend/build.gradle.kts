import org.apache.commons.lang3.StringUtils
import org.springframework.boot.gradle.tasks.bundling.BootBuildImage

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    id("org.springframework.boot") version "3.5.5"
    id("io.spring.dependency-management") version "1.1.7"
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
    id("org.openapi.generator") version "7.6.0"
}
val springModulithVersion by extra("1.3.7")

repositories {
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    mavenLocal()
}

group = "club.zabiny"
version = "0.1-SNAPSHOT"
description = "klabis"
java.sourceCompatibility = JavaVersion.VERSION_21

val recordbuilderVersion = "41"
val mapstructVersion = "1.6.2"
val mapstructSpringExtensionsVersion = "1.1.2"

dependencies {

    // SPRING WEB
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")

    // SPRING SECURITY
    implementation("org.springframework.boot:spring-boot-starter-oauth2-authorization-server")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    runtimeOnly("io.zipkin.reporter2:zipkin-reporter-brave")
    runtimeOnly("io.micrometer:micrometer-tracing-bridge-brave")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")
    testImplementation("org.springframework.security:spring-security-test")

    // SPRING DATA
    implementation("org.springframework.data:spring-data-commons")
    implementation("org.springframework:spring-tx")
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    //implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    //implementation("org.springframework.boot:spring-boot-starter-data-rest")
    //implementation("org.springframework.data:spring-data-rest-hal-explorer")

    // MODULITH
    implementation("org.springframework.modulith:spring-modulith-starter-core")
    //implementation("org.springframework.modulith:spring-modulith-starter-jdbc")
    testImplementation("org.springframework.modulith:spring-modulith-starter-test")
    runtimeOnly("org.springframework.modulith:spring-modulith-starter-insight")

    // SPRING TOOLS
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-devtools")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    // Jackson mappings
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv")

    // Test containers
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")

    // DB
    runtimeOnly("org.postgresql:postgresql")
    //runtimeOnly(libs.com.h2database.h2)
    //implementation("org.flywaydb:flyway-core")

    // OPENAPI
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12")
    implementation("org.openapitools:jackson-databind-nullable:0.2.6")
    implementation("org.hibernate:hibernate-validator:8.0.1.Final")

    // MapStruct
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    implementation("org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructSpringExtensionsVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor("org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}")
    testAnnotationProcessor("org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}")
    testImplementation("org.mapstruct.extensions.spring:mapstruct-spring-test-extensions:${mapstructSpringExtensionsVersion}")

    // RecordBuilder
    annotationProcessor("io.soabase.record-builder:record-builder-processor:${recordbuilderVersion}")
    compileOnly("io.soabase.record-builder:record-builder-core:${recordbuilderVersion}")

    // Various
    implementation("org.jmolecules:jmolecules-ddd:1.9.0")
    implementation("org.jmolecules:jmolecules-hexagonal-architecture:1.9.0")
    implementation("org.jmolecules:jmolecules-onion-architecture:1.9.0")
    implementation("org.jmolecules:jmolecules-events:1.9.0")
    testImplementation("org.jmolecules.integrations:jmolecules-archunit:0.28.0")
    testImplementation("com.tngtech.archunit:archunit-junit5:1.4.1")
    testImplementation("org.awaitility:awaitility:4.3.0")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

java.sourceSets["main"].java {
    srcDir(layout.buildDirectory.dir("generated/klabisapi/src/main/java"))
}

val copyApiSpecs = tasks.register<Copy>("copyApiSpecs") {
    from(layout.projectDirectory.file("../klabis-api-spec.yaml"))
    into(layout.buildDirectory.dir("resources/main/static"))
}

java.sourceSets["main"].resources {
    srcDir(copyApiSpecs.map { it.temporaryDir })
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(
        listOf(
            //"-Amapstruct.verbose=true",
            //"-Amapstruct.suppressGeneratorTimestamp=true",
            //"-Amapstruct.suppressGeneratorVersionComment=true",
            "-Amapstruct.defaultComponentModel=spring"
        )
    )
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

//tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateKlabisApiServerStub") {
openApiGenerate {
//    group = "openapi tools"
    generatorName.set("spring")
    inputSpec.set(layout.projectDirectory.file("../klabis-api-spec.yaml").asFile.absolutePath)
    outputDir.set(layout.buildDirectory.dir("generated/klabisapi").get().asFile.absolutePath)
    apiPackage.set("club.klabis.api")
    invokerPackage.set("org.openapi.example.invoker")
    modelPackage.set("club.klabis.api.dto")
    modelNameSuffix.set("ApiDto")
    library.set("spring-boot")
    configOptions.putAll(
        mapOf(
            "dateLibrary" to "java8",
            "useSpringBoot3" to "true",
            "generateBuilders" to "true",
            "useSpringController" to "false",
            "hateoas" to "true",
            "booleanGetterPrefix" to "is",
            "interfaceOnly" to "true",
            "skipDefaultInterface" to "true",
            "useBeanValidation" to "true",
            "apiFirst" to "false"
            //"useOptional" to "false"
        )
    )
}
//tasks.compileJava.get().dependsOn(tasks.openApiGenerate)

// SpringDoc - generate OpenAPI during build from Controllers defined in Java
// https://github.com/springdoc/springdoc-openapi-gradle-plugin
openApi {
    outputDir.set(layout.buildDirectory.dir("openapi"))
    customBootRun.jvmArgs.set(listOf("-Dspring.profiles.active=apidocgenerator"))
    groupedApiMappings.putAll( // see group-mappings defined in application.yml for springdoc
        mapOf(
            "http://localhost:8080/v3/api-docs/members" to "members.json",
            "http://localhost:8080/v3/api-docs/events" to "events.json",
            "http://localhost:8080/v3/api-docs/appusers" to "appusers.json",
            "http://localhost:8080/v3/api-docs/oris" to "oris.json",
            "http://localhost:8080/v3/api-docs" to "klabis-full.json"
        )
    )
}

tasks.jar.get().dependsOn(tasks.generateOpenApiDocs)

// Register a task to copy generated OpenAPI files to the project root (parent of this build script)
val copyOpenApiDocs = tasks.register<Copy>("copyOpenApiDocs") {
    from(layout.buildDirectory.dir("openapi"))
    // Copy to the parent directory of the project (i.e., one level up from backend/)
    into(layout.projectDirectory.dir("../docs/openapi"))
}

// Ensure the copy runs after OpenAPI docs are generated
tasks.named("generateOpenApiDocs") {
    finalizedBy(copyOpenApiDocs)
}

tasks.getByName<BootBuildImage>("bootBuildImage") {
    imageName = "${project.name}:${project.version}"
    publish = false
    docker {
        publishRegistry {
            username = StringUtils.defaultIfBlank(System.getenv("DOCKER_REGISTRY_USERNAME"), "dummy")
            password = StringUtils.defaultIfBlank(System.getenv("DOCKER_REGISTRY_PASSWORD"), "dummy")
            url = System.getenv("DOCKER_REGISTRY_URL")
            email = "gradle@noreply.com"
        }
    }
}
dependencyManagement {
    imports {
        mavenBom("org.springframework.modulith:spring-modulith-bom:$springModulithVersion")
    }
}


